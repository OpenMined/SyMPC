"""Securenn protocol.

Sameer Wagh, Divya Gupta, and Nishanth Chandran.
Securenn: Efficient and private neural network training.
IACR Cryptol. ePrint Arch., 2018:442, 2018.
"""
# third party
import torch

from sympc.session.session import Session
from sympc.tensor.mpc_tensor import MPCTensor


def msb(tensor: MPCTensor) -> None:
    """Most significant bit."
    
    Args:
        tensor (MPCTensor): Tensor to calculate msb. 

    Returns:
        None
    """""
    parties = tensor.session.parties

    L = tensor.session.ring_size  # 2**64

    # Common Randomness
    u = _shares_of_zero(1, L, dtype, crypto_provider, *workers)
    beta = _random_common_bit(*workers, dtype=torch_dtype)


def shares_of_zero(size: int, session: Session):
    """Shares of zeros.

    Shares generated by a worker and sent to all workers, in
    the form of a MultiPointerTensor.

    Args:
        size (int): Size of the tensor.
        session (Session): MPC Session.

    Returns:
        MPCTensor: Shared tensor.
    """

    tensor_zeros = torch.zeros(size, dtype=torch.int64)
    x_sh = MPCTensor(secret=tensor_zeros, session=session)

    return x_sh


def random_common_bit(session: Session):
    """Random common bit.

    Args:
        session (Session): MPC Session.


    Returns:
        List[Torch.Tensor]: List of pointers to random bits.
    """
    random_bit = torch.randint(0, 2, (1,), dtype=torch.int64)
    ptrs_common_bit = [random_bit.send(party) for party in session.parties]

    return ptrs_common_bit


if __name__ == "__main__":
    x = torch.tensor([2])
    kk = MPCTensor(
        x,
    )
    _shares_of_zero(1, 2 ** 64, session=s)
